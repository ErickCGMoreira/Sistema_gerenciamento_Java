/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jframes;

import dao.*;
import database.Conexao;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import model.*;

/**
 *
 * @author Aluno_Manha
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form ModeloJFrame
     */
    
    private String userDB;
    private String passDB;
    private HashMap<String,Atendimento> atendimentos = new HashMap<>();
    private HashMap<String,Cliente> clientes = new HashMap<>();
    private HashMap<String,Funcionario> funcionarios = new HashMap<>();
    private HashMap<String,Atendimento> agenda = new HashMap<>();
    private int tipoAdd;
    Vector originalTableModel;
    
    public View() {
        initComponents();
        initializeAdm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoNav = new javax.swing.ButtonGroup();
        Main = new javax.swing.JPanel();
        jScrollPaneNav = new javax.swing.JScrollPane();
        nav = new javax.swing.JPanel();
        Clientes = new javax.swing.JToggleButton();
        Agendamentos = new javax.swing.JToggleButton();
        Funcionarios = new javax.swing.JToggleButton();
        Agenda = new javax.swing.JToggleButton();
        OrdemDeServico = new javax.swing.JToggleButton();
        MudarSenha = new javax.swing.JToggleButton();
        jScrollPaneCards = new javax.swing.JScrollPane();
        cards = new javax.swing.JPanel();
        cardBemVindo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cardAgenda = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaAgenda = new javax.swing.JTable();
        cardTabela = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaResultados = new javax.swing.JTable();
        pesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        adicionar = new javax.swing.JButton();
        cardMudarSenha = new javax.swing.JPanel();
        userAtual = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        passAtual = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        userNovo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        passNovo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        mensagemErro = new javax.swing.JLabel();
        Header = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();

        botaoNav.add(Clientes);
        botaoNav.add(Agendamentos);
        botaoNav.add(Funcionarios);
        botaoNav.add(Agenda);
        botaoNav.add(OrdemDeServico);
        botaoNav.add(MudarSenha);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(229, 221, 191));
        setSize(new java.awt.Dimension(800, 600));

        Main.setBackground(new java.awt.Color(229, 221, 191));
        Main.setPreferredSize(new java.awt.Dimension(800, 475));

        nav.setBackground(new java.awt.Color(229, 221, 191));
        nav.setMinimumSize(new java.awt.Dimension(150, 199));
        nav.setPreferredSize(new java.awt.Dimension(150, 475));
        nav.setLayout(new java.awt.GridLayout(0, 1));

        Clientes.setBackground(new java.awt.Color(241, 208, 119));
        Clientes.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        Clientes.setText("Clientes");
        Clientes.setToolTipText("Gerenciar as informações dos clientes");
        Clientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Clientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientesActionPerformed(evt);
            }
        });
        nav.add(Clientes);

        Agendamentos.setBackground(new java.awt.Color(241, 208, 119));
        Agendamentos.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        Agendamentos.setText("Agendamentos");
        Agendamentos.setToolTipText("Gerenciar as informações dos agendamentos");
        Agendamentos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Agendamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgendamentosActionPerformed(evt);
            }
        });
        nav.add(Agendamentos);

        Funcionarios.setBackground(new java.awt.Color(241, 208, 119));
        Funcionarios.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        Funcionarios.setText("Funcionários");
        Funcionarios.setToolTipText("Gerenciar as informações dos funcionários");
        Funcionarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Funcionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FuncionariosActionPerformed(evt);
            }
        });
        nav.add(Funcionarios);

        Agenda.setBackground(new java.awt.Color(241, 208, 119));
        Agenda.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        Agenda.setText("Agenda");
        Agenda.setToolTipText("Mostrar a agenda dos atendimentos");
        Agenda.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Agenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgendaActionPerformed(evt);
            }
        });
        nav.add(Agenda);

        OrdemDeServico.setBackground(new java.awt.Color(241, 208, 119));
        OrdemDeServico.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        OrdemDeServico.setText("Ordem de serviço");
        OrdemDeServico.setToolTipText("Gerenciar as ordens de serviço");
        OrdemDeServico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        OrdemDeServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdemDeServicoActionPerformed(evt);
            }
        });
        nav.add(OrdemDeServico);

        MudarSenha.setBackground(new java.awt.Color(241, 208, 119));
        MudarSenha.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        MudarSenha.setText("Mudar senha");
        MudarSenha.setToolTipText("Alterar usuário e senha de login");
        MudarSenha.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MudarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MudarSenhaActionPerformed(evt);
            }
        });
        nav.add(MudarSenha);

        jScrollPaneNav.setViewportView(nav);

        cards.setPreferredSize(new java.awt.Dimension(650, 475));
        cards.setLayout(new java.awt.CardLayout());

        cardBemVindo.setPreferredSize(new java.awt.Dimension(650, 475));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        jLabel2.setText("Bem vindo!");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Navegue pelo sistema utilizando os botões ao lado");

        javax.swing.GroupLayout cardBemVindoLayout = new javax.swing.GroupLayout(cardBemVindo);
        cardBemVindo.setLayout(cardBemVindoLayout);
        cardBemVindoLayout.setHorizontalGroup(
            cardBemVindoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardBemVindoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(cardBemVindoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cardBemVindoLayout.setVerticalGroup(
            cardBemVindoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardBemVindoLayout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel2)
                .addGap(78, 78, 78)
                .addComponent(jLabel3)
                .addContainerGap(252, Short.MAX_VALUE))
        );

        cards.add(cardBemVindo, "card4");

        cardAgenda.setPreferredSize(new java.awt.Dimension(650, 475));

        tabelaAgenda.setAutoCreateRowSorter(true);
        tabelaAgenda.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        tabelaAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "idAtendimento", "Funcionario", "Cliente", "Tipo", "Endereço", "Data Marcada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaAgenda);

        javax.swing.GroupLayout cardAgendaLayout = new javax.swing.GroupLayout(cardAgenda);
        cardAgenda.setLayout(cardAgendaLayout);
        cardAgendaLayout.setHorizontalGroup(
            cardAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        cardAgendaLayout.setVerticalGroup(
            cardAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardAgendaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 336, Short.MAX_VALUE))
        );

        cards.add(cardAgenda, "cardAgenda");

        cardTabela.setBackground(new java.awt.Color(219, 211, 181));
        cardTabela.setPreferredSize(new java.awt.Dimension(650, 475));

        tabelaResultados.setAutoCreateRowSorter(true);
        tabelaResultados.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        tabelaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "idCliente", "Nome", "Email", "CPF", "CEP", "Endereço", "Contato", "Data de Cadastro", "Premium", "Alterar", "Deletar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaResultados.setFillsViewportHeight(true);
        tabelaResultados.setRowHeight(26);
        jScrollPane1.setViewportView(tabelaResultados);

        pesquisa.setToolTipText("Digite alguma informação que queira pesquisar");
        pesquisa.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                pesquisaInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        pesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisaActionPerformed(evt);
            }
        });
        pesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pesquisaKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setText("Pesquisar:");

        adicionar.setText("Adicionar");
        adicionar.setToolTipText("Criar uma nova instancia na tabela atual e registra-la no banco");
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cardTabelaLayout = new javax.swing.GroupLayout(cardTabela);
        cardTabela.setLayout(cardTabelaLayout);
        cardTabelaLayout.setHorizontalGroup(
            cardTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pesquisa)
                .addGap(37, 37, 37)
                .addComponent(adicionar))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        cardTabelaLayout.setVerticalGroup(
            cardTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardTabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cardTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(adicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
        );

        cards.add(cardTabela, "cardTabela");

        cardMudarSenha.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        cardMudarSenha.setInheritsPopupMenu(true);
        cardMudarSenha.setPreferredSize(new java.awt.Dimension(650, 475));

        userAtual.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel7.setText("Usuário atual:");

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Senha atual:");

        passAtual.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel9.setText("Novo usuário:");

        userNovo.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Nova senha:");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        passNovo.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mensagemErro.setText("Usuário ou senha atual errados");
        mensagemErro.setVisible(false);

        javax.swing.GroupLayout cardMudarSenhaLayout = new javax.swing.GroupLayout(cardMudarSenha);
        cardMudarSenha.setLayout(cardMudarSenhaLayout);
        cardMudarSenhaLayout.setHorizontalGroup(
            cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardMudarSenhaLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(cardMudarSenhaLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userNovo))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cardMudarSenhaLayout.createSequentialGroup()
                        .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passAtual, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addComponent(userAtual)))
                    .addGroup(cardMudarSenhaLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passNovo)))
                .addGap(50, 50, 50))
            .addGroup(cardMudarSenhaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mensagemErro)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cardMudarSenhaLayout.setVerticalGroup(
            cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardMudarSenhaLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNovo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cardMudarSenhaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passNovo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(mensagemErro)
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addContainerGap(163, Short.MAX_VALUE))
        );

        cards.add(cardMudarSenha, "cardMudarSenha");

        jScrollPaneCards.setViewportView(cards);

        javax.swing.GroupLayout MainLayout = new javax.swing.GroupLayout(Main);
        Main.setLayout(MainLayout);
        MainLayout.setHorizontalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneNav, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneCards, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        MainLayout.setVerticalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCards)
                    .addComponent(jScrollPaneNav))
                .addContainerGap())
        );

        Header.setBackground(new java.awt.Color(127, 74, 39));
        Header.setToolTipText("");
        Header.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Header.setMinimumSize(new java.awt.Dimension(300, 100));
        Header.setPreferredSize(new java.awt.Dimension(800, 125));

        logo.setFont(new java.awt.Font("Modern No. 20", 1, 48)); // NOI18N
        logo.setForeground(new java.awt.Color(241, 208, 119));
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo.png"))); // NOI18N
        logo.setLabelFor(Header);
        logo.setText("EletroTech Solutions");
        logo.setIconTextGap(10);
        logo.setMinimumSize(new java.awt.Dimension(111, 111));
        logo.setPreferredSize(new java.awt.Dimension(900, 111));

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Main, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MudarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MudarSenhaActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardMudarSenha");
    }//GEN-LAST:event_MudarSenhaActionPerformed

    private void OrdemDeServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdemDeServicoActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardTabela");
        atendimentos = AtendimentoDAO.listarClientes();
        clientes = ClienteDAO.listarClientes();
        funcionarios = FuncionarioDAO.listarClientes();
        tipoAdd = 2;
        String[] col = new String [] {"idAtendimento", "idCliente", "idFuncionário","Tipo", "Endereço", "Data de criação", "Data marcada", "Data realizado", "Valor", "Descrição", "Avaliação", "Mensagem", "Emitir OS"};
        DefaultTableModel modelTabela = new DefaultTableModel(col, 0);
        atendimentos.forEach((key,aten)->{
            Object[] x = {aten.getIdAtendimento(), aten.getIdCliente(), aten.getIdFuncionario(), aten.getTipo(), aten.getEndereco(), aten.getDataCriacao(), aten.getDataMarcado(), aten.getDataRealizado(), aten.getValor(), aten.getDescricao(), aten.getAvaliacao(), aten.getAvaliacaoMensagem(), aten.getIdAtendimento()};
            modelTabela.addRow(x);
        });
        tabelaResultados.setModel(modelTabela);
        tabelaResultados.getColumn("Emitir OS").setCellRenderer(new ButtonRendererOS());
        tabelaResultados.getColumn("Emitir OS").setCellEditor(
            new ButtonEditorOS(new JCheckBox(), atendimentos, clientes, funcionarios));
        originalTableModel = (Vector) ((DefaultTableModel) tabelaResultados.getModel()).getDataVector().clone();
    }//GEN-LAST:event_OrdemDeServicoActionPerformed

    private void AgendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgendaActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardAgenda");
        loadAgenda();
    }//GEN-LAST:event_AgendaActionPerformed

    private void FuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FuncionariosActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardTabela");
        funcionarios = FuncionarioDAO.listarClientes();
        tipoAdd = 1;
        String[] col = new String [] {"idFuncionario", "Nome", "CPF/CNPJ", "Contato", "Idade", "Genero", "CEP", "Endereço", "Salário", "Dados Bancários", "Data de contratação", "Alterar", "Deletar"};
        DefaultTableModel modelTabela = new DefaultTableModel(col, 0);
        funcionarios.forEach((key,funcionario)->{
            Object[] x = {funcionario.getIdFuncionario(), funcionario.getNome(), funcionario.getCpf(), funcionario.getContato(), funcionario.getIdade(), funcionario.getGenero(), funcionario.getCep(), funcionario.getEndereco(), funcionario.getSalario(), funcionario.getDadosBancarios(), funcionario.getDataContrataçao()
            ,funcionario.getIdFuncionario(), funcionario.getIdFuncionario()};
            modelTabela.addRow(x);
        });
        tabelaResultados.setModel(modelTabela);
        tabelaResultados.getColumn("Alterar").setCellRenderer(new ButtonRendererUp());
        tabelaResultados.getColumn("Alterar").setCellEditor(
            new ButtonEditorUp(new JCheckBox(), tipoAdd, atendimentos, clientes, funcionarios));
        tabelaResultados.getColumn("Deletar").setCellRenderer(new ButtonRendererDel());
        tabelaResultados.getColumn("Deletar").setCellEditor(
            new ButtonEditorDel(new JCheckBox(), tipoAdd,  atendimentos, clientes, funcionarios));
        originalTableModel = (Vector) ((DefaultTableModel) tabelaResultados.getModel()).getDataVector().clone();
    }//GEN-LAST:event_FuncionariosActionPerformed

    private void AgendamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgendamentosActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardTabela");
        atendimentos = AtendimentoDAO.listarClientes();
        tipoAdd = 2;
        String[] col = new String [] {"idAtendimento", "idCliente", "idFuncionário","Tipo", "Endereço", "Data de criação", "Data marcada", "Data realizado", "Valor", "Descrição", "Avaliação", "Mensagem", "Alterar", "Deletar"};
        DefaultTableModel modelTabela = new DefaultTableModel(col, 0);
        atendimentos.forEach((key,aten)->{
            Object[] x = {aten.getIdAtendimento(), aten.getIdCliente(), aten.getIdFuncionario(), aten.getTipo(), aten.getEndereco(), aten.getDataCriacao(), aten.getDataMarcado(), aten.getDataRealizado(), aten.getValor(), aten.getDescricao(), aten.getAvaliacao(), aten.getAvaliacaoMensagem(), aten.getIdAtendimento(), aten.getIdAtendimento()};
            modelTabela.addRow(x);
        });
        tabelaResultados.setModel(modelTabela);
        tabelaResultados.getColumn("Alterar").setCellRenderer(new ButtonRendererUp());
        tabelaResultados.getColumn("Alterar").setCellEditor(
            new ButtonEditorUp(new JCheckBox(), tipoAdd, atendimentos, clientes, funcionarios));
        tabelaResultados.getColumn("Deletar").setCellRenderer(new ButtonRendererDel());
        tabelaResultados.getColumn("Deletar").setCellEditor(
            new ButtonEditorDel(new JCheckBox(), tipoAdd,  atendimentos, clientes, funcionarios));
        originalTableModel = (Vector) ((DefaultTableModel) tabelaResultados.getModel()).getDataVector().clone();
    }//GEN-LAST:event_AgendamentosActionPerformed

    private void ClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientesActionPerformed
        CardLayout cl = (CardLayout)(cards.getLayout());
        cl.show(cards, "cardTabela");
        clientes = ClienteDAO.listarClientes();
        tipoAdd = 3;
        String[] col = new String [] {"idCliente", "Nome", "Email", "Senha", "CPF/CNPJ", "CEP", "Endereço", "Contato", "Dada de cadastro", "Premium", "Alterar", "Deletar"};
        DefaultTableModel modelTabela = new DefaultTableModel(col, 0);
        clientes.forEach((key,cliente)->{
            Object[] x = {cliente.getIdCliente(), cliente.getNome(), cliente.getEmail(), cliente.getSenha(), cliente.getCpf(), cliente.getCep(), cliente.getEndereco(), cliente.getContato(), cliente.getDataCadastro(), cliente.isPremium(), cliente.getIdCliente(), cliente.getIdCliente()};
            modelTabela.addRow(x);
        });
        tabelaResultados.setModel(modelTabela);
        tabelaResultados.getColumn("Alterar").setCellRenderer(new ButtonRendererUp());
        tabelaResultados.getColumn("Alterar").setCellEditor(
            new ButtonEditorUp(new JCheckBox(), tipoAdd, atendimentos, clientes, funcionarios));
        tabelaResultados.getColumn("Deletar").setCellRenderer(new ButtonRendererDel());
        tabelaResultados.getColumn("Deletar").setCellEditor(
            new ButtonEditorDel(new JCheckBox(), tipoAdd,  atendimentos, clientes, funcionarios));
        originalTableModel = (Vector) ((DefaultTableModel) tabelaResultados.getModel()).getDataVector().clone();
    }//GEN-LAST:event_ClientesActionPerformed

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        switch (tipoAdd){
            case 1:
                AlterarFuncinario alter1 = new AlterarFuncinario(new Funcionario(), true);
                alter1.setVisible(true);
                break;
            case 2:
                AlterarAtendimento alter2 = new AlterarAtendimento(new Atendimento(), true);
                alter2.setVisible(true);
                break;
            case 3:
                AlterarCliente alter3 = new AlterarCliente(new Cliente(), true);
                alter3.setVisible(true);
                break;
        }
    }//GEN-LAST:event_adicionarActionPerformed

    private void pesquisaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pesquisaKeyTyped
        String search = pesquisa.getText();
        if (search !=null){
            searchTableContents(search);
        } else {
            
        }
    }//GEN-LAST:event_pesquisaKeyTyped

    private void pesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisaActionPerformed
        String search = pesquisa.getText();
        if (search !=null){
            searchTableContents(search);
        } else {
            
        }
    }//GEN-LAST:event_pesquisaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String userSubmitted = userAtual.getText();
        String passSubmitted = passAtual.getText();
        try {
            passSubmitted = toHexString(getSHA(passSubmitted));
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(userDB.equals(userSubmitted) && passDB.equals(passSubmitted)){
            salvarAdm();
        } else {
            mensagemErro.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pesquisaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_pesquisaInputMethodTextChanged
        String search = pesquisa.getText();
        if (search !=null){
            searchTableContents(search);
        } else {
            
        }
    }//GEN-LAST:event_pesquisaInputMethodTextChanged

    public static byte[] getSHA(String input) throws NoSuchAlgorithmException 
	{
		// Static getInstance method is called with hashing SHA
		MessageDigest md = MessageDigest.getInstance("SHA-256");

		// digest() method called
		// to calculate message digest of an input
		// and return array of byte
		return md.digest(input.getBytes(StandardCharsets.UTF_8));
	}
	
	public static String toHexString(byte[] hash)
	{
		// Convert byte array into signum representation
		BigInteger number = new BigInteger(1, hash);

		// Convert message digest into hex value
		StringBuilder hexString = new StringBuilder(number.toString(16));

		// Pad with leading zeros
		while (hexString.length() < 64)
		{
			hexString.insert(0, '0');
		}

		return hexString.toString();
	}
        
        private void initializeAdm(){
            String sql = "SELECT * FROM adm";
            Connection conn = null;
            PreparedStatement pstm = null;
            ResultSet rset = null;
            try {
                conn = Conexao.createConnectionToMysql();
                pstm = (PreparedStatement) conn.prepareStatement(sql);
                rset = (ResultSet) pstm.executeQuery();
                rset.next();
                userDB = rset.getString("usuario");
                passDB = rset.getString("senha");
            } catch (Exception e) {
            }
        }
        
        private void salvarAdm(){
            String sql = "UPDATE adm SET usuario = ?, senha = ? WHERE idAdm = 1";
            Connection conn = null;
            PreparedStatement pstm = null;
            try {
                conn = Conexao.createConnectionToMysql();
                pstm = (PreparedStatement) conn.prepareStatement(sql);
                pstm.setString(1, userNovo.getText());
                pstm.setString(2, passNovo.getText());
                pstm.execute();
                System.out.println("Senha alterada com sucesso!!");
            } catch (Exception e) {
                System.out.println("Erro ao tentar alterar senha");
                e.printStackTrace();
            }
        }
        
        private void loadAgenda(){
            String sql = "SELECT * FROM atendimentosagendados";

            Connection conn = null;
            PreparedStatement pstm = null;
            ResultSet rset = null;
            
            String[] col = new String [] {"idAtendimento", "Funcionario", "Cliente", "Tipo", "Endereço", "Data Marcada"};
            
            DefaultTableModel modelAgenda = new DefaultTableModel(col, 0);

            try {

                conn = Conexao.createConnectionToMysql();
                pstm = (PreparedStatement) conn.prepareStatement(sql);

                //Classe que vai recuperar os dados do banco
                rset = (ResultSet) pstm.executeQuery();

                while (rset.next()){
                    int id = rset.getInt("idAtendimento");
                    String idC = rset.getString("nome_Funcionario");
                    String idF = rset.getString("nome_Cliente");
                    String tipo = rset.getString("tipo");
                    String endereco = rset.getString("endereco");
                    Timestamp dataMarcado = rset.getTimestamp("data_Marcada");
                    Object[] x = {id,idC,idF,tipo,endereco,dataMarcado};
                    modelAgenda.addRow(x);
                }
                tabelaAgenda.setModel(modelAgenda);
                System.out.println("Agenda atualizada");

            } catch (Exception e) {
                System.out.println("Erro ao atualizar agenda");
                e.printStackTrace();
            } finally {
                try {
                    if(rset != null){rset.close();}
                    if(conn != null){conn.close();}
                    if(pstm != null){pstm.close();}
                } catch (Exception e){
                    e.printStackTrace();
                }
            }
        }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    
    public void searchTableContents(String searchString) {
    DefaultTableModel currtableModel = (DefaultTableModel) tabelaResultados.getModel();
    //To empty the table before search
    currtableModel.setRowCount(0);
    //To search for contents from original table content
    for (Object rows : originalTableModel) {
        Vector rowVector = (Vector) rows;
        for (Object column : rowVector) {
            if (column.toString().contains(searchString)) {
                //content found so adding to table
                currtableModel.addRow(rowVector);
                break;
            }
        }

    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Agenda;
    private javax.swing.JToggleButton Agendamentos;
    private javax.swing.JToggleButton Clientes;
    private javax.swing.JToggleButton Funcionarios;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel Main;
    private javax.swing.JToggleButton MudarSenha;
    private javax.swing.JToggleButton OrdemDeServico;
    private javax.swing.JButton adicionar;
    private javax.swing.ButtonGroup botaoNav;
    private javax.swing.JPanel cardAgenda;
    private javax.swing.JPanel cardBemVindo;
    private javax.swing.JPanel cardMudarSenha;
    private javax.swing.JPanel cardTabela;
    private javax.swing.JPanel cards;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneCards;
    private javax.swing.JScrollPane jScrollPaneNav;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel mensagemErro;
    private javax.swing.JPanel nav;
    private javax.swing.JTextField passAtual;
    private javax.swing.JTextField passNovo;
    private javax.swing.JTextField pesquisa;
    private javax.swing.JTable tabelaAgenda;
    private javax.swing.JTable tabelaResultados;
    private javax.swing.JTextField userAtual;
    private javax.swing.JTextField userNovo;
    // End of variables declaration//GEN-END:variables
}
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */


